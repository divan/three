package three
// Code generated by go generate; DO NOT EDIT.
//
// using the following cmd:
// geometry_method_generator -geometryType RingGeometry -geometrySlug ring_geometry

import "github.com/gopherjs/gopherjs/js"
	
func (g RingGeometry) ApplyMatrix(matrix *Matrix4) {
	g.Object.Call("applyMatrix", matrix)
}

func (g RingGeometry) RotateX() {
	g.Object.Call("rotateX")
}

func (g RingGeometry) RotateY() {
	g.Object.Call("rotateY")
}

func (g RingGeometry) RotateZ() {
	g.Object.Call("rotateZ")
}

func (g RingGeometry) Translate() {
	g.Object.Call("translate")
}

func (g RingGeometry) Scale() {
	g.Object.Call("scale")
}

func (g RingGeometry) LookAt() {
	g.Object.Call("lookAt")
}

func (g RingGeometry) FromBufferGeometry(geometry Geometry) {
	g.Object.Call("fromBufferGeometry")
}

func (g RingGeometry) Center() {
	g.Object.Call("center")
}

func (g RingGeometry) Normalize() RingGeometry {
	g.Object.Call("normalize")
	return g
}

func (g RingGeometry) ComputeFaceNormals() {
	g.Object.Call("computeFaceNormals")
}

func (g RingGeometry) ComputeVertexNormals(areaWeighted bool) {
	g.Object.Call("computeVertexNormals", areaWeighted)
}

func (g RingGeometry) ComputeFlatVertexNormals() {
	g.Object.Call("computeFlatVertexNormals")
}

func (g RingGeometry) ComputeMorphNormals() {
	g.Object.Call("computeMorphNormals")
}

func (g RingGeometry) ComputeLineDistances() {
	g.Object.Call("computeLineDistances")
}

func (g RingGeometry) ComputeBoundingBox() {
	g.Object.Call("computeBoundingBox")
}

func (g RingGeometry) ComputeBoundingSphere() {
	g.Object.Call("computeBoundingSphere")
}

func (g RingGeometry) Merge(geometry Geometry, matrix Matrix4, materialIndexOffset float64) {
	g.Object.Call("merge", geometry, matrix, materialIndexOffset)
}

func (g RingGeometry) MergeMesh(mesh Mesh) {
	g.Object.Call("mergeMesh", mesh.getInternalObject())
}

func (g RingGeometry) MergeVertices() {
	g.Object.Call("mergeVertices")
}

func (g RingGeometry) SortFacesByMaterialIndex() {
	g.Object.Call("sortFacesByMaterialIndex")
}

func (g RingGeometry) ToJSON() interface{} {
	return g.Object.Call("toJSON")
}

// func (g RingGeometry) Clone() RingGeometry {
// 	return g.Object.Call("clone")
// }

func (g RingGeometry) Copy(source Object3D, recursive bool) *RingGeometry {
	return &RingGeometry{Object: g.getInternalObject().Call("copy", source.getInternalObject(), recursive)}
}

func (g RingGeometry) Dispose() {
	g.Object.Call("dispose")
}

func (g RingGeometry) getInternalObject() *js.Object {
	return g.Object
}

